{"version":3,"sources":["../../src/routes/help.js"],"names":["router","EMAIL_PASS","config","parsed","post","req","res","firstName","lastName","email","message","subject","body","transporter","createTransport","service","port","secure","auth","user","pass","tls","rejectUnauthorized","emailNum","emailAddr","alpha","split","num","emailArr","i","length","indexOf","toString","supportId","Date","valueOf","helpRequestMessage","from","to","text","sendMail","requestMsgErr","requestMsgInfo","responseCode","helpConfirmMessage","confirmMsgErr","confirmMsgInfo"],"mappings":";;;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;AALA;AAOA,MAAMA,SAAS,sBAAf;;AAEA,MAAM,EAAEC,UAAF,KAAiB,iBAAOC,MAAP,GAAgBC,MAAvC;;AAEA;;;;AAIA;AACAH,OAAOI,IAAP,CAAY,GAAZ,EAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,QAAM,EAAEC,SAAF,EAAaC,QAAb,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,KAAmDN,IAAIO,IAA7D;AACA,QAAMC,cAAc,qBAAWC,eAAX,CAA2B;AAC7CC,aAAS,OADoC;AAE7CC,UAAM,GAFuC;AAG7CC,YAAQ,IAHqC;AAI7CC,UAAM;AACJC,YAAM,qBADF;AAEJC,YAAMnB;AAFF,KAJuC;AAQ7CoB,SAAK;AACHC,0BAAoB;AADjB;AARwC,GAA3B,CAApB;;AAaA,QAAMC,WAAYC,SAAD,IAAe;AAC9B,UAAMC,QAAQ,oGAAoGC,KAApG,CAA0G,EAA1G,CAAd;AACA,QAAIC,MAAM,EAAV;AACA,UAAMC,WAAWJ,UAAUE,KAAV,CAAgB,EAAhB,CAAjB;;AAEA,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAID,SAASE,MAA7B,EAAqCD,KAAK,CAA1C,EAA6C;AAC3C,UAAID,SAASG,OAAT,CAAiB,GAAjB,IAAwBF,CAA5B,EAA+B;AAC7BF,eAAOF,MAAMM,OAAN,CAAcH,SAASC,CAAT,CAAd,EAA2BG,QAA3B,EAAP;AACD,OAFD,MAEO;AACL,eAAOL,GAAP;AACD;AACF;AACD,WAAOA,GAAP;AACD,GAbD;;AAeA,QAAMM,YAAa,GAAEV,SAASd,KAAT,CAAgB,GAAG,IAAIyB,IAAJ,GAAWC,OAAX,EAAsB,EAA9D;;AAEA,QAAMC,qBAAqB;AACzBC,UAAM,0BADmB;AAEzBC,QAAI,qBAFqB;AAGzB3B,aAAU,iBAAgBsB,SAAU,MAAKtB,OAAQ,EAHxB;AAIzB4B,UAAO;;;QAGHhC,SAAU,IAAGC,QAAS;SACrBC,KAAM;;;EAGbC,OAAQ;;;;;AAXmB,GAA3B;;AAkBAG,cAAY2B,QAAZ,CACEJ,kBADF,EAEE,CAACK,aAAD,EAAgBC,cAAhB,KAAmC;AACjC,QAAID,aAAJ,EAAmB;AACjB,aAAO,wBACLA,cAAcE,YADT,EAELF,aAFK,EAGL,gGAHK,EAILnC,GAJK,CAAP;AAKD,KAND,MAMO,IAAIoC,cAAJ,EAAoB;AACzB,YAAME,qBAAqB;AACzBP,cAAM,uBADmB;AAEzBC,YAAI,CAAC7B,KAAD,CAFqB;AAGzBE,iBAAU,iBAAgBsB,SAAU,MAAKtB,OAAQ,EAHxB;AAIzB4B,cAAO;QACThC,SAAU,IAAGC,QAAS;;;;;EAK5BE,OAAQ;;;;;AAVyB,OAA3B;;AAiBA,aAAOG,YAAY2B,QAAZ,CACLI,kBADK,EAEL,CAACC,aAAD,EAAgBC,cAAhB,KAAmC;AACjC,YAAID,aAAJ,EAAmB;AACjB,iBAAO,wBACLA,cAAcF,YADT,EAELE,aAFK,EAGL,iEAHK,EAILvC,GAJK,CAAP;AAKD,SAND,MAMO,IAAIwC,cAAJ,EAAoB;AACzB,iBAAO,wBACL,GADK,EAELA,cAFK,EAGL,4CAHK,EAILxC,GAJK,CAAP;AAKD;AACD,eAAO,wBACL,GADK,EAEL,EAFK,EAGL,iEAHK,EAILA,GAJK,CAAP;AAKD,OArBI,CAAP;AAuBD;AACD,WAAO,wBACL,GADK,EAEL,EAFK,EAGL,iEAHK,EAILA,GAJK,CAAP;AAKD,GAxDH;AA0DD,CA5GD;;AA8GA;kBACeN,M","file":"help.js","sourcesContent":["// Create API Users Router\nimport { Router } from 'express';\nimport nodemailer from 'nodemailer';\nimport dotenv from 'dotenv';\n\nimport jsonReponse from '../helpers/response';\n\nconst router = Router();\n\nconst { EMAIL_PASS } = dotenv.config().parsed;\n\n/*\n******HELP ROUTES******\n*/\n\n// Accepts a help contact request. Returns a confirmation message.\nrouter.post('/', (req, res) => {\n  const { firstName, lastName, email, message, subject } = req.body;\n  const transporter = nodemailer.createTransport({\n    service: 'Gmail',\n    port: 465,\n    secure: true,\n    auth: {\n      user: 'ssmith@wombatweb.us',\n      pass: EMAIL_PASS,\n    },\n    tls: {\n      rejectUnauthorized: false,\n    },\n  });\n\n  const emailNum = (emailAddr) => {\n    const alpha = 'abcdefghijklmnopqrstuvwxyz@.ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!#$%&\\'*+-/=?^_`{|}~\"(),:;<>@[\\\\]'.split('');\n    let num = '';\n    const emailArr = emailAddr.split('');\n\n    for (let i = 0; i < emailArr.length; i += 1) {\n      if (emailArr.indexOf('@') > i) {\n        num += alpha.indexOf(emailArr[i]).toString();\n      } else {\n        return num;\n      }\n    }\n    return num;\n  };\n\n  const supportId = `${emailNum(email)}${(new Date().valueOf())}`;\n\n  const helpRequestMessage = {\n    from: 'noreply@designbright.org',\n    to: 'ssmith@wombatweb.us',\n    subject: `Help Request #${supportId} - ${subject}`,\n    text: `\nA support request for www.designbright.org has been submitted.\n\nName: ${firstName} ${lastName}\nEmail: ${email}\n\nMessage:\n${message}\n\nThank you,\nDesign Bright Support\n    `,\n  };\n\n  transporter.sendMail(\n    helpRequestMessage,\n    (requestMsgErr, requestMsgInfo) => {\n      if (requestMsgErr) {\n        return jsonReponse(\n          requestMsgErr.responseCode,\n          requestMsgErr,\n          'There was an error sending your support request. Please send an email to help@designbright.org',\n          res);\n      } else if (requestMsgInfo) {\n        const helpConfirmMessage = {\n          from: 'help@designbright.org',\n          to: [email],\n          subject: `Help Request #${supportId} - ${subject}`,\n          text: `\nHello ${firstName} ${lastName},\n\nWe have received the request below for help. We look forward to helping you. Please allow 24-48 hours for a response. \n\nHelp Request:\n${message}\n\nThank you,\nDesign Bright Support\n          `,\n        };\n\n        return transporter.sendMail(\n          helpConfirmMessage,\n          (confirmMsgErr, confirmMsgInfo) => {\n            if (confirmMsgErr) {\n              return jsonReponse(\n                confirmMsgErr.responseCode,\n                confirmMsgErr,\n                'Your support request failed. Please email help@designbright.org',\n                res);\n            } else if (confirmMsgInfo) {\n              return jsonReponse(\n                200,\n                confirmMsgInfo,\n                'You support request was successfully sent.',\n                res);\n            }\n            return jsonReponse(\n              404,\n              {},\n              'Your support request failed. Please email help@designbright.org',\n              res);\n          },\n        );\n      }\n      return jsonReponse(\n        404,\n        {},\n        'Your support request failed. Please email help@designbright.org',\n        res);\n    },\n  );\n});\n\n// Exporting router as default.\nexport default router;\n"]}