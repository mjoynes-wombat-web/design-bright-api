{"version":3,"sources":["../../src/models/campaigns.js"],"names":["db","getCampaignById","getCampaignId","success","error","campaigns","find","where","campaignId","then","results","message","code","nonprofitId","name","duration","fundingNeeded","donationsMade","startDate","endDate","catch","findErr","getCampaignContent","include","model","campaignContent","contentStatus","campaignText","campaignImages","campaignInfo","contentId","createdDate","updatedAt","campaignTexts","campaignContents","contentInfo","campaignTextBlocks","reduce","parsedCampaignText","block","parsedBlock","textId","position","kind","isVoid","type","nodes","JSON","parse","createdAt","push","campaignImagesBlocks","cleanedImageData","cleanedBlock","imgId","data","alt","src","imageType","unsortedCampaignContent","sort","a","b","getNonprofitsCampaigns","findAll","findResults","i","length","dataValues","launchCampaign","campaign","Date","setDate","getDate","update","updateResults","updateErr","stopCampaign","$ne","createContent","content","create","newContent","rawContent","document","blocks","formattedBlocks","index","newBlocks","formattedBlock","includes","stringify","text","images","bulkCreate","statusCode","createImagesErr","createTextErr","createContentErr","updateStatusErr","createCampaign","newCampaign","createCampaignErr","errors","updateCampaignInfo","updatedCampaignInfo","updateCampaignErr","donateToCampaign","amount","findCampaignResults","parseFloat","updateDonationResults","updateDonationErr","findCampaignErr","getCampaigns","page","search","$gt","findCampaignsResults","allCampaigns","cleanedCampaigns","cleanedCampaign","campaignParagraphs","paragraphs","reducedBlock","firstParagraph","node","newText","ranges","description","campaignMainImgs","img","image","options","shouldSort","maxPatternLength","minMatchCharLength","tokenize","matchAllTokens","threshold","keys","weight","fuse","searchedCampaigns","sortCampaigns","sortedCampaigns","paginatedCampaigns","slice","pages","Math","ceil","findCampaignsErr"],"mappings":"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","file":"campaigns.js","sourcesContent":["import Fuse from 'fuse.js';\n\nimport * as db from './db';\n\nexport const getCampaignById = (getCampaignId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId: getCampaignId },\n  })\n    .then((results) => {\n      if (results === null) {\n        return error({ message: `There isn't a campaign with the id ${getCampaignId}.`, error: results, code: 404 });\n      }\n      const {\n        campaignId,\n        nonprofitId,\n        name,\n        duration,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate } = results;\n\n      return success({\n        nonprofitId,\n        campaignId,\n        name,\n        duration,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate,\n      });\n    }).catch((findErr => error({ message: `There was a database error finding the campaign with the id ${getCampaignId}.`, error: findErr, code: 500 })));\n};\n\nexport const getCampaignContent = (campaignId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n    include: [\n      {\n        model: db.campaignContent,\n        where: {\n          campaignId,\n          contentStatus: 'current',\n        },\n        include: [\n          {\n            model: db.campaignText,\n          },\n          {\n            model: db.campaignImages,\n          },\n        ],\n      },\n    ],\n  })\n    .then((results) => {\n      const {\n        nonprofitId,\n        name,\n        duration,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate } = results;\n      const campaignInfo = {\n        nonprofitId,\n        campaignId,\n        name,\n        duration,\n        fundingNeeded,\n        donationsMade,\n        startDate,\n        endDate,\n      };\n      const {\n        contentId,\n        contentStatus,\n        createdDate,\n        updatedAt,\n        campaignTexts,\n        campaignImages } = results.campaignContents[0];\n\n\n      const contentInfo = {\n        contentId,\n        campaignId,\n        contentStatus,\n        createdDate,\n        updatedAt,\n      };\n\n      const campaignTextBlocks = campaignTexts.reduce(\n        (parsedCampaignText, block) => {\n          const parsedBlock = {\n            textId: block.textId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            nodes: JSON.parse(block.nodes),\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n          parsedCampaignText.push(parsedBlock);\n          return parsedCampaignText;\n        },\n        [],\n      );\n\n      const campaignImagesBlocks = campaignImages.reduce(\n        (cleanedImageData, block) => {\n          const cleanedBlock = {\n            imgId: block.imgId,\n            contentId: block.contentId,\n            position: block.position,\n            kind: block.kind,\n            isVoid: block.isVoid,\n            type: block.type,\n            data: {\n              alt: block.alt,\n              src: block.src,\n              imageType: block.imageType,\n            },\n            createdAt: block.createdAt,\n            updatedAt: block.updatedAt,\n          };\n\n          cleanedImageData.push(cleanedBlock);\n          return cleanedImageData;\n        },\n        [],\n      );\n      const unsortedCampaignContent = [\n        ...campaignImagesBlocks,\n        ...campaignTextBlocks,\n      ];\n      const campaignContent = unsortedCampaignContent.sort(\n        (a, b) => a.position - b.position);\n      success({\n        campaignInfo,\n        contentInfo,\n        campaignContent,\n      });\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const getNonprofitsCampaigns = (nonprofitId, success, error) => {\n  db.campaigns.findAll({\n    where: { nonprofitId },\n  })\n    .then((findResults) => {\n      const campaigns = [];\n      for (let i = 0; i < findResults.length; i += 1) {\n        campaigns.push(findResults[i].dataValues);\n      }\n      success(campaigns);\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const launchCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n  })\n    .then((campaign) => {\n      const startDate = new Date();\n      const endDate = new Date(Date.parse(startDate));\n      endDate.setDate(endDate.getDate() + campaign.duration);\n\n      db.campaigns.update(\n        { startDate, endDate },\n        { where: { campaignId, nonprofitId, startDate: null, endDate: null } },\n      )\n        .then(updateResults => success(updateResults))\n        .catch(updateErr => error(updateErr));\n    })\n    .catch(findErr => error(findErr));\n};\n\nexport const stopCampaign = (campaignId, nonprofitId, success, error) => {\n  db.campaigns.update(\n    { endDate: new Date() },\n    {\n      where: {\n        campaignId,\n        nonprofitId,\n        startDate: {\n          $ne: null,\n        },\n      },\n    },\n  )\n    .then(updateResults => success(updateResults))\n    .catch(updateErr => error(updateErr));\n};\n\nexport const createContent = (campaignId, content, success, error) => {\n  db.campaignContent.update(\n    { contentStatus: 'previous' },\n    {\n      where: {\n        campaignId,\n        contentStatus: 'current',\n      },\n    },\n  )\n    .then(() => {\n      db.campaignContent.create(\n        {\n          campaignId,\n          contentStatus: 'current',\n          createdDate: new Date(),\n        },\n      )\n        .then((newContent) => {\n          const contentId = newContent.contentId;\n          const rawContent = content.document.nodes;\n          const blocks = rawContent.reduce(\n            (formattedBlocks, block, index) => {\n              const newBlocks = formattedBlocks;\n              const formattedBlock = {\n                contentId,\n                position: index + 1,\n                kind: block.kind,\n                isVoid: block.isVoid,\n                type: block.type,\n              };\n              if (['paragraph', 'header', 'numberedList', 'bulletedList'].includes(block.type)) {\n                formattedBlock.nodes = JSON.stringify(block.nodes);\n                newBlocks.text.push(formattedBlock);\n                return newBlocks;\n              } else if (block.type === 'image') {\n                formattedBlock.alt = block.data.alt;\n                formattedBlock.src = block.data.src;\n                formattedBlock.imageType = block.data.imageType;\n                newBlocks.images.push(formattedBlock);\n                return newBlocks;\n              }\n              return newBlocks;\n            },\n            {\n              text: [],\n              images: [],\n            },\n          );\n          db.campaignText.bulkCreate(\n            blocks.text,\n          )\n            .then(() => {\n              db.campaignImages.bulkCreate(\n                blocks.images,\n              )\n                .then(() => {\n                  success(\n                    {\n                      statusCode: 200,\n                      message: `The content for the campaign with the id ${campaignId} was saved.`,\n                      campaignId,\n                    },\n                  );\n                })\n                .catch(createImagesErr => error(\n                  {\n                    statusCode: 500,\n                    message: 'There was an error creating the image content.',\n                    error: createImagesErr,\n                  },\n                ));\n            })\n            .catch(createTextErr => error(\n              {\n                statusCode: 500,\n                message: 'There was an error creating the text content.',\n                error: createTextErr,\n              },\n            ));\n        })\n        .catch(createContentErr => error(\n          {\n            statusCode: 500,\n            message: 'There was an error creating the content information.',\n            error: createContentErr,\n          },\n        ));\n    })\n    .catch(updateStatusErr => error(\n      {\n        statusCode: 500,\n        message: 'There was an error changing the previous content\\'s status.',\n        error: updateStatusErr,\n      },\n    ));\n};\n\nexport const createCampaign = (\n  nonprofitId,\n  { name, fundingNeeded, duration, content },\n  success,\n  error) => {\n  db.campaigns.create(\n    {\n      nonprofitId,\n      name,\n      duration,\n      fundingNeeded,\n    },\n  )\n    .then((newCampaign) => {\n      const { campaignId } = newCampaign;\n      createContent(campaignId, content, success, error);\n    })\n    .catch((createCampaignErr) => {\n      if (createCampaignErr.errors[0].type === 'unique violation') {\n        return error(\n          {\n            statusCode: 409,\n            error: createCampaignErr,\n            message: 'That campaign name has already been taken. Please try another name.',\n          },\n        );\n      }\n      return error(\n        {\n          statusCode: 500,\n          message: 'There was an error creating the campaign information.',\n          error: createCampaignErr,\n        },\n      )\n    });\n};\n\nexport const updateCampaignInfo = (\n  nonprofitId,\n  { campaignId, name, fundingNeeded, duration },\n  success,\n  error,\n) => {\n  db.campaigns.update(\n    {\n      name,\n      fundingNeeded,\n      duration,\n    },\n    {\n      where: {\n        nonprofitId,\n        campaignId,\n      },\n    },\n  )\n    .then((updatedCampaignInfo) => {\n      if (updatedCampaignInfo[0] === 0) {\n        return error({\n          statusCode: 404,\n          message: `The nonprofit with the id ${nonprofitId} doesn't exists or the campaign with the id ${campaignId} doesn't exists or belong to that nonprofit.`,\n          error: updatedCampaignInfo,\n        });\n      }\n      return success({\n        statusCode: 200,\n        message: `The campaign info was saved for campaign id ${campaignId}.`,\n        updatedCampaignInfo,\n      });\n    })\n    .catch((updateCampaignErr) => {\n      if (updateCampaignErr.errors[0].type === 'unique violation') {\n        return error(\n          {\n            statusCode: 409,\n            error: updateCampaignErr,\n            message: 'That campaign name has already been taken. Please try another name.',\n          },\n        );\n      }\n      return error({\n        statusCode: 500,\n        message: 'There was an error saving the campaign information.',\n        error: updateCampaignErr,\n      });\n    });\n};\n\nexport const donateToCampaign = (campaignId, amount, success, error) => {\n  db.campaigns.find({\n    where: { campaignId },\n  })\n    .then((findCampaignResults) => {\n      if (findCampaignResults.startDate) {\n        const donationsMade = (\n          parseFloat(findCampaignResults.donationsMade)\n          + (parseFloat(amount) / 100)\n        );\n\n        return db.campaigns.update(\n          { donationsMade },\n          { where: { campaignId } },\n        ).then((updateDonationResults) => {\n          if (updateDonationResults[0] > 0) {\n            return success({\n              code: 200,\n              data: {\n                results: updateDonationResults,\n                donationsMade,\n              },\n              message: `The donations for the campaign with the id ${campaignId} were updated to $${donationsMade}`,\n            });\n          }\n          return error({\n            code: 404,\n            error: updateDonationResults,\n            message: `We could not find the campaign with the id ${campaignId}`,\n          });\n        }).catch(updateDonationErr => error({\n          code: 500,\n          error: updateDonationErr,\n          message: `The donations made for the campaign with the id ${campaignId} were not updated.`,\n        }));\n      }\n      return error({\n        code: 401,\n        error: findCampaignResults,\n        message: `The campaign with the id of ${campaignId} hasn't been started yet.`,\n      });\n    })\n    .catch(findCampaignErr => error({\n      code: 404,\n      error: findCampaignErr,\n      message: `We could not find the campaign with the id ${campaignId}`,\n    }));\n};\n\nexport const getCampaigns = ({ page, search, sort }, success, error) => {\n  db.campaigns.findAll(\n    {\n      where: {\n        startDate: {\n          $ne: null,\n        },\n        endDate: {\n          $gt: new Date(),\n        },\n      },\n      include: [\n        {\n          model: db.campaignContent,\n          where: {\n            contentStatus: 'current',\n          },\n          include: [\n            {\n              model: db.campaignText,\n            },\n            {\n              model: db.campaignImages,\n            },\n          ],\n        },\n      ],\n    },\n  )\n    .then((findCampaignsResults) => {\n      const allCampaigns = findCampaignsResults.reduce(\n        (cleanedCampaigns, campaign) => {\n          const {\n            campaignId,\n            name,\n            duration,\n            fundingNeeded,\n            donationsMade,\n            startDate,\n            endDate,\n            campaignContents,\n          } = campaign;\n          const cleanedCampaign = {\n            campaignId,\n            name,\n            duration,\n            fundingNeeded,\n            donationsMade,\n            startDate,\n            endDate,\n          };\n\n          const campaignParagraphs = campaignContents[0].campaignTexts.reduce(\n            (paragraphs, block) => {\n              const reducedBlock = block;\n              if (reducedBlock.type === 'paragraph') {\n                reducedBlock.nodes = JSON.parse(block.nodes);\n                paragraphs.push(reducedBlock);\n              }\n              return paragraphs;\n            },\n            [],\n          );\n          const firstParagraph = campaignParagraphs[0].nodes.reduce(\n            (text, node) => {\n              if (node.type === 'link') {\n                const newText = text + node.nodes[0].ranges[0].text;\n                return newText;\n              }\n              const newText = text + node.ranges[0].text;\n              return newText;\n            },\n            '',\n          );\n          cleanedCampaign.description = firstParagraph;\n\n          const campaignMainImgs = campaignContents[0].campaignImages.reduce(\n            (images, img) => {\n              if (img.imageType === 'main') {\n                const { alt, src } = img;\n                images.push(\n                  {\n                    alt,\n                    src,\n                  },\n                );\n                return images;\n              }\n              return images;\n            },\n            [],\n          );\n          cleanedCampaign.image = campaignMainImgs[0];\n\n          cleanedCampaigns.push(cleanedCampaign);\n          return cleanedCampaigns;\n        },\n        [],\n      );\n\n      const options = {\n        shouldSort: true,\n        maxPatternLength: 48,\n        minMatchCharLength: 2,\n        tokenize: true,\n        matchAllTokens: true,\n        threshold: 0.3,\n        keys: [\n          {\n            name: 'name',\n            weight: 0.7,\n          },\n          {\n            name: 'description',\n            weight: 0.4,\n          },\n        ],\n      };\n\n      const fuse = new Fuse(allCampaigns, options);\n      const searchedCampaigns = search ? fuse.search(search) : allCampaigns;\n\n      const sortCampaigns = () => {\n        switch (sort) {\n          case 'Percent Funded':\n            return searchedCampaigns.sort(\n              (a, b) => (b.donationsMade / b.fundingNeeded) - (a.donationsMade / a.fundingNeeded));\n          case 'Days Remaining':\n            return searchedCampaigns.sort(\n              (a, b) => (Date.parse(a.endDate)) - Date.parse(b.endDate));\n          case 'Funding Needed':\n            return searchedCampaigns.sort(\n              (a, b) => (a.fundingNeeded - a.donationsMade)\n                - (b.fundingNeeded - b.donationsMade));\n          case 'Newest':\n            return searchedCampaigns.sort(\n              (a, b) => Date.parse(b.startDate)\n                - Date.parse(a.startDate));\n          case 'Relevance':\n          default:\n            return searchedCampaigns;\n        }\n      };\n\n      const sortedCampaigns = sortCampaigns();\n\n      const paginatedCampaigns = (page\n        ? sortedCampaigns.slice(((page - 1) * 6), (page * 6))\n        : sortedCampaigns.slice(0, 6));\n\n      const pages = Math.ceil(sortedCampaigns.length / 6);\n\n      if (paginatedCampaigns.length) {\n        const message = (search\n          ? `Page ${page} of ${pages} for the campaign results filtered by \"${search}\", sorted by ${sort}`\n          : `Page ${page} of ${pages} for the campaign results sorted by ${sort}`);\n        return success({\n          statusCode: 200,\n          campaigns: paginatedCampaigns,\n          search,\n          sort,\n          page,\n          pages,\n          message,\n        });\n      } else if (pages === 0) {\n        return error({\n          statusCode: 404,\n          campaigns: paginatedCampaigns,\n          search,\n          sort,\n          page,\n          pages,\n          message: `The are no campaigns for \"${search}\"`,\n        });\n      } else if (page > pages) {\n        return error({\n          statusCode: 404,\n          campaigns: paginatedCampaigns,\n          search,\n          sort,\n          page,\n          pages,\n          message: `There are only ${pages} pages of results. You are trying to access page ${page}.`,\n        });\n      }\n      return error({\n        statusCode: 404,\n        campaigns: paginatedCampaigns,\n        search,\n        sort,\n        page,\n        pages,\n        message: `The are no campaigns for \"${search}\".`,\n      });\n    })\n    .catch(findCampaignsErr => error({\n      statusCode: 500,\n      error: findCampaignsErr,\n      search,\n      sort,\n      page,\n      message: 'The are was an error retrieving the campaigns. Please try refreshing. If this doesn\\'t fix the problem got to Need Help? at the bottom of this page.',\n    }));\n};\n"]}